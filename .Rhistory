#g_z1 parameters
g_linf=6.1,
g_k=.5,
g_dT0=.5
)
pr_z_pars<-c(
#pr_z parameters
)
### Assemble parameters
pars<-rbind(G_z1z_pars,s_z_pars,pb_z_pars,b_z_pars,pr_z_pars,g_z1_pars)
### Assemble parameters
pars<-c(G_z1z_pars,s_z_pars,pb_z_pars,b_z_pars,pr_z_pars,g_z1_pars)
pars
b_z_pars<-c(
#b_z parameters
b_max=3500,
b_d=1.5,
b_k=1.5,
b_infl=3.5
)
pars<-c(G_z1z_pars,s_z_pars,pb_z_pars,b_z_pars,pr_z_pars,g_z1_pars)
view(pars)
pars<-c(G_z1z_pars,s_z_pars,pb_z_pars,b_z_pars,pr_z_pars,g_z1_pars)
pars
sw_z<-function(z,par)
{
ct<-par["sw_ctf"]
p<-ifelse(z < ct,0,min(1,par[["sw_h"]]+exp(-par[["sw_k"]]*(z-par[["sw_k"]]))))
return(p)
}
sw_z_pars<-c(
# sw_z parameters
sw_ctf=1.5,
sw_h=1,
sw_k=2.96
)
mk_K <- function(m, par, L, U,Pk,Fk)
{
# mesh points
h <- (U - L)/m
meshpts <- L + ((1:m) - 1/2) * h
p <- h * (outer(meshpts, meshpts, Pk, par))
f <- h * (outer(meshpts, meshpts, Fk, par))
k <- p + f
return(list(k = k, meshpts = meshpts, p = p, f = f, m = m))
}
install.packages("rmarkdown")
install.packages("rmarkdown",destdir="C:/Program Files/R/R-3.2.5/library")
install.packages("rmarkdown")
plot(cars)
vb<-c()
vb[0]<-0
for(i in 1:365){
vb[i]<-vB(z=vb[i-1],dT=(1/365),6.1,.5)
}
vB<-function(z,dT,zinf,k){
return(zinf-(zinf-z)*exp(-k*dT))
}
vb<-c()
vb[0]<-0
for(i in 1:365){
vb[i]<-vB(z=vb[i-1],dT=(1/365),6.1,.5)
}
vb<-c()
vb[0]<-0
for(i in 1:365){
vb[i]<-vB(vb[i-1],dT=(1/365),6.1,.5)
}
vb[1]<-vB(vb[0],1/365,6.1,.5)
vB(vb[0],1/365,6.1,.5)
vB(0,1/365,6.1,.5)
vb<-c()
vb[1]<-0
for(i in 0:364){
vb[i+1]<-vB(vb[i],(1/365),6.1,.5)
}
vb<-c()
vb[1]<-0
vB(vb[1],1/365,6.1,.5)
vb[1]<-vB(vb[0],1/365,6.1,.5)
vb[0]
vb[0]<-0L
vb[0]
vb[0]<-1
vb[0]
vb[1]<-vB(0,1/365,6.1,.5)
vb<-c()
vb[1]<-vB(0,1/365,6.1,.5)
for(i in 1:364){
vb[i+1]<-vB(vb[i],(1/365),6.1,.5)
}
plot(vb)
vb[365]
vbc<-c()
vbc[1]<-vb[1]
vb<-c()
vb[1]<-vB(0,1/365,6.1,.5)
vbc<-c()
vbc[1]<-vb[1]
for(i in 1:364){
vb[i+1]<-vB(vb[i],(1/365),6.1,.5)
vbc[i+1]<-vB(0,i+1/365,6.1)
}
vb<-c()
vb[1]<-vB(0,1/365,6.1,.5)
vbc<-c()
vbc[1]<-vb[1]
for(i in 1:364){
vb[i+1]<-vB(vb[i],(1/365),6.1,.5)
vbc[i+1]<-vB(0,i+1/365,6.1,.5)
}
plot(vb)
plot(vbc,add=T)
plot(vb)
points(vbc)
plot(vb)
plot(vbc)
vb<-c()
vb[1]<-vB(0,1/365,6.1,.5)
vbc<-c()
vbc[1]<-vb[1]
for(i in 1:364){
vb[i+1]<-vB(vb[i],(1/365),6.1,.5)
vbc[i+1]<-vB(0,(i+1)/365,6.1,.5)
}
vb[365]
plot(vb)
plot(vbc)
plot(vb)
plot(vbc)
diff(vb,vbc)
vb-vbc
plot(vb-vbc)
(24^(1/3))^(1/2)
24^(1/4)
sqrt(sqrt(12)*sqrt(2))
library(readxl)
cohort_mort_length <- read_excel("L:/Priv/FishTranslatorDiscussions/Fathead Life-history/cohort_mort_length.xlsx")
View(cohort_mort_length)
cml<-cohort_mort_length
cml[[1]]
cml$Site
cml$col<-NA
cml$col[which(cml$cohort==1)]<-red
cml$col[which(cml$cohort==1)]<-"red"
cml$col<-NA
cml$col[which(cml$cohort==1)]<-"red"
cml$col[which(cml$cohort==2)]<-"orange"
cml$col[which(cml$cohort==3)]<-"yellow"
cml$col[which(cml$cohort==4)]<-"green"
cml$col[which(cml$cohort==5)]<-"blue"
cml$col
cml$col[which(cml$Cohort==1)]<-"red"
cml$col[which(cml$Cohort==2)]<-"orange"
cml$col[which(cml$Cohort==3)]<-"yellow"
cml$col[which(cml$Cohort==4)]<-"green"
cml$col[which(cml$Cohort==5)]<-"blue"
cml$col
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=2)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=9)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=6)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=4)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=12)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=15)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=14)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=16)
legend("top",legend=c(1,2,3,4,5),col=cml$col)
legend("top",pch=16, legend=c(1,2,3,4,5),col=cml$col)
legend("top",pch=16, legend=c(1,2,3,4,5),col=c(r,o,y,g,b))
legend("top",pch=16, legend=c(1,2,3,4,5),col=c("r","o","y","g","b"))
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=16)
legend("top",pch=16, legend=c(1,2,3,4,5),col=c("r","o","y","g","b"))
legend("top",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=16,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("top",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
cml$Site
cml$s[which(cml$Site=="Little Brush")]<-1
cml$s[which(cml$Site=="Larson")]<-2
cml$s[which(cml$Site=="Ratfield")]<-3
cml$s[which(cml$Site=="Oak")]<-4
cml$st[which(cml$Site=="Little Brush")]<-1
cml$st[which(cml$Site=="Larson")]<-2
cml$st[which(cml$Site=="Ratfield")]<-3
cml$st[which(cml$Site=="Oak")]<-4
cml$st
cml$st[which(cml$Site=="Little Brush")]<-1
cml$st[which(cml$Site=="Larson")]<-2
cml$st[which(cml$Site=="Ratfield")]<-3
cml$st[which(cml$Site=="Oak")]<-4
cml$st
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("top",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("top",pch=c(1,2,3,4), legend=c("Little Brush","Larson","Ratfield","Oak"))
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("topleft",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("topright",pch=c(1,2,3,4), legend=c("Little Brush","Larson","Ratfield","Oak"))
#### Survival(Mortality) from Duffy (1997)
library(readxl)
cohort_mort_length <- read_excel("L:/Priv/FishTranslatorDiscussions/Fathead Life-history/cohort_mort_length.xlsx")
View(cohort_mort_length)
cml<-cohort_mort_length
##Assign colors to cohort
cml$col[which(cml$Cohort==1)]<-"red"
cml$col[which(cml$Cohort==2)]<-"orange"
cml$col[which(cml$Cohort==3)]<-"yellow"
cml$col[which(cml$Cohort==4)]<-"green"
cml$col[which(cml$Cohort==5)]<-"blue"
##Assign shapes to sites
cml$st[which(cml$Site=="Little Brush")]<-1
cml$st[which(cml$Site=="Larson")]<-2
cml$st[which(cml$Site=="Ratfield")]<-3
cml$st[which(cml$Site=="Oak")]<-4
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("topleft",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("topright",pch=c(1,2,3,4), legend=c("Little Brush","Larson","Ratfield","Oak"))
##Assign shapes to sites
cml$st[which(cml$Site=="Little Brush")]<-1
cml$st[which(cml$Site=="Larson")]<-2
cml$st[which(cml$Site=="Ratfield")]<-3
cml$st[which(cml$Site=="Oak")]<-4
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("topleft",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("topright",pch=c(1,2,3,4), legend=c("Little Brush","Larson","Ratfield","Oak"))
#### Survival(Mortality) from Duffy (1997)
library(readxl)
cohort_mort_length <- read_excel("L:/Priv/FishTranslatorDiscussions/Fathead Life-history/cohort_mort_length.xlsx")
View(cohort_mort_length)
##Assign colors to cohort
cml$col[which(cml$Cohort==1)]<-"red"
cml$col[which(cml$Cohort==2)]<-"orange"
cml$col[which(cml$Cohort==3)]<-"yellow"
cml$col[which(cml$Cohort==4)]<-"green"
cml$col[which(cml$Cohort==5)]<-"blue"
##Assign shapes to sites
cml$st[which(cml$Site=="Little Brush")]<-1
cml$st[which(cml$Site=="Larson")]<-2
cml$st[which(cml$Site=="Ratfield")]<-3
cml$st[which(cml$Site=="Oak")]<-4
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("topleft",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("topright",pch=c(1,2,3,4), legend=c("Little Brush","Larson","Ratfield","Oak"))
cml$st[which(cml$Site=="Little Brush")]<-15
cml$st[which(cml$Site=="Larson")]<-16
cml$st[which(cml$Site=="Ratfield")]<-17
cml$st[which(cml$Site=="Oak")]<-18
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("topleft",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("topright",pch=c(15,16,17,18), legend=c("Little Brush","Larson","Ratfield","Oak"))
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)",cex=1.5)
legend("topleft",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("topright",pch=c(15,16,17,18), legend=c("Little Brush","Larson","Ratfield","Oak"))
S<-function(z,par)
{
return(min(1,par[["S_h"]]+exp(-par[["S_k"]]*(z-par[["S_k"]]))))
}
## s_z parameters
S_pars<-c(
S_h=1,
S_k=2.96
)
S<-function(z,par)
{
#return(min(1,par[["S_h"]]+exp(-par[["S_k"]]*(z-par[["S_k"]]))))
return(par[["S_h"]]+exp(-par[["S_k"]]*(z-par[["S_k"]])))
}
## s_z parameters
S_pars<-c(
S_h=1,
S_k=2.96
)
curve(S(z,S_pars),xname="z",from=0,to=6.1)
#### LOAD PACKAGES AND IMPORT AOPWIKI DATA ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
## Needs igraph package
library(igraph)
#localLibDir<-"C:\\Program Files\\R\\R-3.2.0\\library\\"  #Jason's local library directory
#library(igraph, lib.loc = localLibDir)
##  Set working directory
workingDir<-"C://Users/NPollesc/Desktop/GitHub/AOPwiki/" ## Nate's EPA working directory
#workingDir<-"C://Users/Nathan Pollesch/Documents/GitHub/AOPWiki/" ## Nate's personal comp working directory
# workingDir<-"C:\\Users\\obrienja\\Documents\\GitHub\\AOPWiki\\"
setwd(workingDir)
## Identifies location of data files
KERimport <- "data/all-KERs.txt"
KEimport <- "data/all-KEs.txt"
KEplus <- "data/all-KEs-plus.txt" # Additional ontology information file
KEked <- "data/all-KEs-KED.txt" # Additional ontology information file
KERwoe<- "data/all-ke-ker-woe.txt" # WOE for KER
## source() imports custom functions from associated file
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEKdata<-read.table(paste(workingDir, KEked, sep=""), sep="\t", stringsAsFactors=FALSE, header=F)
## Format KEPdata for easier handling later
KEPdata[,1]<-as.numeric(substring(KEPdata[,1],5)) #strips the characters Aop: from AOPID column and turns the result numeric
KEPdata[,3]<-as.numeric(substring(KEPdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KEKdata[,2]<-as.numeric(substring(KEKdata[,2],7)) #strips the characters Event: from the Event ID column and turns the result numeric
## Identify all unique KEs by looking at all names involved in KERs
allKEs<-append(KERdata[,2],KERdata[,4])
uniqueKEs<-unique(allKEs)
keID<-data.frame(ID=1:length(uniqueKEs),KE=uniqueKEs)
KERs<-cbind(match(KERdata[,2], keID[,2]),match(KERdata[,4], keID[,2]))
AOPg<-graph_from_edgelist(KERs, directed=T) #This construction has unnessary steps
## Add names for key event nodes
V(AOPg)$KE_name<-as.character(keID$KE)
## Add event IDS
V(AOPg)$KE_EID<-KEdata[match(V(AOPg)$KE_name,KEdata[,3]),1] # adds event ID number
V(AOPg)$name<-V(AOPg)$KE_EID #changes default 'name' object to be the KE_EID
## Add AOP IDs. Note: Each KE may belong to more than one AOP, so the AOP_IDs object is a list not just a single AOP ID
for(i in 1:length(V(AOPg))){
if(length(which(!is.na(match(KEPdata[,3],V(AOPg)$KE_EID[i]))))>0){
V(AOPg)[i]$AOP_ID<-list(unique(KEPdata[which(!is.na(match(KEPdata[,3],V(AOPg)[i]$KE_EID))),1]))}
else{V(AOPg)[i]$AOP_ID<-NA}
}
## Add key event designation data
V(AOPg)$KE_KED<-KEKdata[match(V(AOPg)$KE_EID,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
length(V(AOPg)$KE_KED[which(is.na(V(AOPg)$KE_KED))]) #The number of KEs without KE_KED
V(AOPg)$KE_KED[which(is.na(V(AOPg)$KE_KED))]<-"KE" # ALL KEs without KED (NA values from file) are assigned as generic KE
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## Builds AOPwiki network from Edgelist with weights ##
KERWdata<-read.table(paste(workingDir, KERwoe, sep=""), sep="\t", stringsAsFactors=FALSE, header=T)
KERWdata[,2]<-as.numeric(substring(KERWdata[,2],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KERWdata[,3]<-as.numeric(substring(KERWdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KERWdata[,4]<-as.numeric(substring(KERWdata[,4],14))
##Create igraph object
wKERs<-cbind(as.character(KERWdata[,2]),as.character(KERWdata[,3]))
AOPw<-graph_from_edgelist(wKERs, directed=T)
E(AOPw)$KER_ID<-KERWdata[,7]
E(AOPw)$evidence<-KERWdata[,6]
#E(AOPw)$evidence[which(is.na(E(AOPw)$evidence))]<-3
E(AOPw)$quant<-KERWdata[,7]
#E(AOPw)$quant[which(is.na(E(AOPw)$quant))]<-3
## Remove multiple edges
AOPws<-simplify(AOPw,remove.multiple=T,edge.attr.comb="min")
#plot(AOPws, vertex.label=NA,vertex.size=2,edge.arrow.size=.05, edge.width=3/E(AOPws)$evidence)
## Use event ID # as vertex name attribute
V(AOPws)$name<-as.integer(V(AOPws)$name)
## Add KED data for MIE to AO analysis using weighted edges
V(AOPws)$KE_KED<-KEKdata[match(V(AOPws)$name,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
length(V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]) #The number of KEs without KEDs
V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]<-"KE" # ALL KEs without KED (NA values from file) are assigned as generic KE
## Adds KED coloring to AOPws
V(AOPws)$ked_color<-"Yellow"
V(AOPws)$ked_color[which(V(AOPws)$KE_KED=="MIE")]<-"Green"
V(AOPws)$ked_color[which(V(AOPws)$KE_KED=="AO")]<-"Red"
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
### Import edge weight values from AOPws to AOPg ###
## Builds list of edge names that is used to match edges between AOPws and AOPg
wsEnames<-cbind(names(head_of(AOPws,E(AOPws))),names(tail_of(AOPws,E(AOPws))))
AOPgEnames<-cbind(names(head_of(AOPg,E(AOPg))),names(tail_of(AOPg,E(AOPg))))
## Creates a string from both edges to use in 'match'
wsPairs<-paste(wsEnames[,1],wsEnames[,2])
AOPgPairs<-paste(AOPgEnames[,1],AOPgEnames[,2])
## Assigns evidence values from AOPws to AOPg graph
E(AOPg)$evidence<-E(AOPws)$evidence[charmatch(AOPgPairs,wsPairs)]
length(E(AOPg)$evidence[!is.na(E(AOPg)$evidence)])
mean(E(AOPg)$evidence[!is.na(E(AOPg)$evidence)])
# Assigns NAs a value of 3 for evidence
E(AOPg)$evidence[is.na(E(AOPg)$evidence)]<-3
## Assigns quant values from AOPws to AOPg graph
E(AOPg)$quant<-E(AOPws)$quant[charmatch(AOPgPairs,wsPairs)]
length(E(AOPg)$quant[!is.na(E(AOPg)$quant)])
mean(E(AOPg)$quant[!is.na(E(AOPg)$quant)])
# Assigns NAs a value of 3 for evidence
E(AOPg)$quant[is.na(E(AOPg)$quant)]<-3
### AOP ID from AOPws
V(AOPws)$KE_KED<-KEKdata[match(V(AOPws)$name,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
length(V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]) # The number of KEs without KEDs
V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]<-"KE" # ALL KEs without KED (NA values from file) are assigned as generic KE
KEKdata[,1]<-as.numeric(substring(KEKdata[,1],5))
## MIE, KE, and AO coloring assignments
V(AOPg)$ked_color<-"white"
V(AOPg)$ked_color[which(V(AOPg)$KE_KED=="MIE")]<-"Green"
V(AOPg)$ked_color[which(V(AOPg)$KE_KED=="AO")]<-"Red"
## ASSIGN AOP IDS TO AOPWS VERTICES #NEEDS TO BE FIXED# ##
#V(AOPws)$AOP_ID<-KEKdata[match(V(AOPws)$name,KEKdata[,2]),1]
#V(AOPws)$AOP_ID
## Set default plotting background color to black
##!! Evaluate as either T or F or plots will not display properly
set.bg.black(F)
urb_ids<-c(112,163,167,200,206,29,30,34,36,52,53,58,72,205,3,165)
ca_ids<-c(58,112,167,200,29,30,52,53,163,206,34,36,72,165,11,60,8)
urb_kes<-c()
for(j in 1:length(V(AOPg))){
for(k in 1:length(urb_ids)){
if(urb_ids[k] %in% unlist(V(AOPg)[j]$AOP_ID))
urb_kes<-append(urb_kes,j)
}}
ca_kes<-c()
for(j in 1:length(V(AOPg))){
for(k in 1:length(ca_ids)){
if(ca_ids[k] %in% unlist(V(AOPg)[j]$AOP_ID))
ca_kes<-append(ca_kes,j)
}}
ca.urb_kes<-intersect(ca_kes,urb_kes)
ca.urb.u_kes<-union(ca_kes,urb_kes)
ca.urb.kes<-data.frame(V(AOPg)[ca.urb_kes]$KE_EID,V(AOPg)[ca.urb_kes]$KE_name)
ca.kes<-data.frame(V(AOPg)[ca_kes]$KE_EID,V(AOPg)[ca_kes]$KE_name)
urb.kes<-data.frame(V(AOPg)[urb_kes]$KE_EID,V(AOPg)[urb_kes]$KE_name)
ca.urb.u<-subgraph(AOPg,ca.urb.u_kes)
ca.urb.kers<-data.frame(E(ca.urb.u))
ca.urb.kers<-data.frame(E(ca.urb.u)$name)
View(ca.urb.kers)
ca.urb.kers<-data.frame(E(ca.urb.u))
E(ca.urb.u)
E(ca.urb.u)$names
E(ca.urb.u)$name
E(ca.urb.u)$names
V(ca.urb.u)$name
V(ca.urb.u)$name<-V(ca.urb.u)$KE_EID
E(ca.urb.u)
named(E(ca.urb.u))
names(E(ca.urb.u))
name(E(ca.urb.u))
E(ca.urb.u)
V(ca.urb.u)
V(ca.urb.u)$names<-V(ca.urb.u)$KE_EID
V(ca.urb.u)
E(ca.urb.u)
edge_attr(ca.urb.u)
vertex_attr(ca.urb.u)
V(ca.urb.u)$names<-V(ca.urb.u)$KE_name
E(ca.urb.u)
V(ca.urb.u)$name<-V(ca.urb.u)$KE_name
E(ca.urb.u)
write.csv(ca.urb.kers,file="ca.urb.kers.csv")
ca.urb.kers<-data.frame(E(ca.urb.u))
ca.urb.kers<-data.frame(E(ca.urb.u)$name)
View(ca.urb.kers)
write.csv(E(ca.urb.u),file="ca.urb.kers.csv")
edge_attr(ca.urb.u)
edge_attr(ca.urb.u)$name
edge_attr(ca.urb.u)$names
E(ca.urb.u)$names
E(ca.urb.u)$name
E(ca.urb.u)
E(ca.urb.u)[1]
kers<-data.frame(E(ca.urb.u)[1])
kers<-data.frame(E(ca.urb.u)[1,1])
E(ca.urb.u)[1,1]
E(ca.urb.u)[1][1]
E(ca.urb.u)[1]
write_graph(ca.urb.u, file="ca.urb.kers.csv", format = "edgelist")
write_graph(ca.urb.u, file="ca.urb.kers", format = "edgelist")
write_graph(ca.urb.u, file="ca.urb.kers.txt", format = "edgelist")
get_edge_ids(ca.urb.u)
get.edge.ids(ca.urb.u)
edges<-E(ca.urb.u)
edges
as.data.frame(edges)
E(ca.urb.u)[,,]
E(ca.urb.u)[,]
E(ca.urb.u)[]
edeges<-data.frame(E(ca.urb.u)[])
write_graph(ca.urb.u, file="ca.urb.kers.txt", format = "lgl", name=TRUE)
E(ca.urb.u)$name
E(ca.urb.u)$names
E(ca.urb.u)
as.string(E(ca.urb.u))
E(ca.urb.u)
as_edgelist(E(ca.urb.u),names=T)
as_edgelist(ca.urb.u,names=T)
write.csv(as_edgelist(ca.urb.u,names=T),file="ca.urb.kers.csv")
ca.urb_kes<-intersect(ca_kes,urb_kes)
ca.urb.u_kes<-union(ca_kes,urb_kes)
V(AOPg)[ca.urb_kes]$col<-"orange"
V(AOPg)[ca_kes]$col<-"green"
V(AOPg)[urb_kes]$col<-"blue"
ca.urb.u<-subgraph(AOPg,ca.urb.u_kes)
V(ca.urb.u)$name<-V(ca.urb.u)$KE_name
write.csv(as_edgelist(ca.urb.u,names=T),file="ca.urb.kers.csv")
ca.urb.i<-subgraph(AOPg,ca.urb_kes)
V(ca.urb.i)$name<-V(ca.urb.i)$KE_name
write.csv(as_edgelist(ca.urb.i,names=T),file="ca.and.urb.kers.csv")
ca.not.urb<-set.diff(ca_kes,urb_kes)
ca.not.urb<-setdiff(ca_kes,urb_kes)
ca.not.urb
urb.not.ca<-setdiff(urb_kes,ca_kes)
urb.not.ca
c.n.u<-subgraph(AOPg,ca.not.urb)
diffs<-data.frame(V(AOPg)[ca.not.urb],V(AOPg)[urb.not.ca])
diffs<-data.frame(V(AOPg)$name[ca.not.urb],V(AOPg)$[urb.not.ca])
diffs<-data.frame(V(AOPg)$name[ca.not.urb],V(AOPg)$name[urb.not.ca])
diffs<-data.frame(cnu=V(AOPg)$name[ca.not.urb],unc=V(AOPg)$name[urb.not.ca])
diffs
V(AOPg)$KE_Name
V(AOPg)$KE_NAME
V(AOPg)
cnu<-data.frame(V(AOPg)$KE_EID[ca.not.urb],V(AOPg)$KE_name[ca.not.urb])
write.csv(cnu,file="ca.not.urb.kes.csv")
unc<-data.frame(V(AOPg)$KE_EID[urb.not.ca],V(AOPg)$KE_name[urb.not.ca])
write.csv(unc,file="ca.not.urb.kes.csv")
cnu<-data.frame(V(AOPg)$KE_EID[ca.not.urb],V(AOPg)$KE_name[ca.not.urb])
write.csv(cnu,file="ca.not.urb.kes.csv")
cnu<-data.frame(V(AOPg)$KE_EID[ca.not.urb],V(AOPg)$KE_name[ca.not.urb])
write.csv(cnu,file="ca.not.urb.kes.csv")
unc<-data.frame(V(AOPg)$KE_EID[urb.not.ca],V(AOPg)$KE_name[urb.not.ca])
write.csv(unc,file="urb.not.ca.kes.csv")
ca.urb.i<-subgraph(AOPg,ca.urb_kes)
V(ca.urb.i)$name<-V(ca.urb.i)$KE_EID
write.csv(as_edgelist(ca.urb.i,names=T),file="ca.and.urb.kers.csv")
ca.urb.u<-subgraph(AOPg,ca.urb.u_kes)
V(ca.urb.u)$name<-V(ca.urb.u)$KE_EID
write.csv(as_edgelist(ca.urb.u,names=T),file="ca.urb.kers.csv")
ca.urb.i<-subgraph(AOPg,ca.urb_kes)
V(ca.urb.i)$name<-V(ca.urb.i)$KE_EID
write.csv(as_edgelist(ca.urb.i,names=T),file="ca.and.urb.kers.csv")
ca.urb.u<-subgraph(AOPg,ca.urb.u_kes)
V(ca.urb.u)$name<-V(ca.urb.u)$KE_EID
write.csv(as_edgelist(ca.urb.u,names=T),file="ca.urb.kers.csv")
