}
vB<-function(z,dT,zinf,k){
return(zinf-(zinf-z)*exp(-k*dT))
}
vb<-c()
vb[0]<-0
for(i in 1:365){
vb[i]<-vB(z=vb[i-1],dT=(1/365),6.1,.5)
}
vb<-c()
vb[0]<-0
for(i in 1:365){
vb[i]<-vB(vb[i-1],dT=(1/365),6.1,.5)
}
vb[1]<-vB(vb[0],1/365,6.1,.5)
vB(vb[0],1/365,6.1,.5)
vB(0,1/365,6.1,.5)
vb<-c()
vb[1]<-0
for(i in 0:364){
vb[i+1]<-vB(vb[i],(1/365),6.1,.5)
}
vb<-c()
vb[1]<-0
vB(vb[1],1/365,6.1,.5)
vb[1]<-vB(vb[0],1/365,6.1,.5)
vb[0]
vb[0]<-0L
vb[0]
vb[0]<-1
vb[0]
vb[1]<-vB(0,1/365,6.1,.5)
vb<-c()
vb[1]<-vB(0,1/365,6.1,.5)
for(i in 1:364){
vb[i+1]<-vB(vb[i],(1/365),6.1,.5)
}
plot(vb)
vb[365]
vbc<-c()
vbc[1]<-vb[1]
vb<-c()
vb[1]<-vB(0,1/365,6.1,.5)
vbc<-c()
vbc[1]<-vb[1]
for(i in 1:364){
vb[i+1]<-vB(vb[i],(1/365),6.1,.5)
vbc[i+1]<-vB(0,i+1/365,6.1)
}
vb<-c()
vb[1]<-vB(0,1/365,6.1,.5)
vbc<-c()
vbc[1]<-vb[1]
for(i in 1:364){
vb[i+1]<-vB(vb[i],(1/365),6.1,.5)
vbc[i+1]<-vB(0,i+1/365,6.1,.5)
}
plot(vb)
plot(vbc,add=T)
plot(vb)
points(vbc)
plot(vb)
plot(vbc)
vb<-c()
vb[1]<-vB(0,1/365,6.1,.5)
vbc<-c()
vbc[1]<-vb[1]
for(i in 1:364){
vb[i+1]<-vB(vb[i],(1/365),6.1,.5)
vbc[i+1]<-vB(0,(i+1)/365,6.1,.5)
}
vb[365]
plot(vb)
plot(vbc)
plot(vb)
plot(vbc)
diff(vb,vbc)
vb-vbc
plot(vb-vbc)
(24^(1/3))^(1/2)
24^(1/4)
sqrt(sqrt(12)*sqrt(2))
library(readxl)
cohort_mort_length <- read_excel("L:/Priv/FishTranslatorDiscussions/Fathead Life-history/cohort_mort_length.xlsx")
View(cohort_mort_length)
cml<-cohort_mort_length
cml[[1]]
cml$Site
cml$col<-NA
cml$col[which(cml$cohort==1)]<-red
cml$col[which(cml$cohort==1)]<-"red"
cml$col<-NA
cml$col[which(cml$cohort==1)]<-"red"
cml$col[which(cml$cohort==2)]<-"orange"
cml$col[which(cml$cohort==3)]<-"yellow"
cml$col[which(cml$cohort==4)]<-"green"
cml$col[which(cml$cohort==5)]<-"blue"
cml$col
cml$col[which(cml$Cohort==1)]<-"red"
cml$col[which(cml$Cohort==2)]<-"orange"
cml$col[which(cml$Cohort==3)]<-"yellow"
cml$col[which(cml$Cohort==4)]<-"green"
cml$col[which(cml$Cohort==5)]<-"blue"
cml$col
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=2)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=9)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=6)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=4)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=12)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=15)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=14)
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=16)
legend("top",legend=c(1,2,3,4,5),col=cml$col)
legend("top",pch=16, legend=c(1,2,3,4,5),col=cml$col)
legend("top",pch=16, legend=c(1,2,3,4,5),col=c(r,o,y,g,b))
legend("top",pch=16, legend=c(1,2,3,4,5),col=c("r","o","y","g","b"))
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=16)
legend("top",pch=16, legend=c(1,2,3,4,5),col=c("r","o","y","g","b"))
legend("top",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=16,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("top",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
cml$Site
cml$s[which(cml$Site=="Little Brush")]<-1
cml$s[which(cml$Site=="Larson")]<-2
cml$s[which(cml$Site=="Ratfield")]<-3
cml$s[which(cml$Site=="Oak")]<-4
cml$st[which(cml$Site=="Little Brush")]<-1
cml$st[which(cml$Site=="Larson")]<-2
cml$st[which(cml$Site=="Ratfield")]<-3
cml$st[which(cml$Site=="Oak")]<-4
cml$st
cml$st[which(cml$Site=="Little Brush")]<-1
cml$st[which(cml$Site=="Larson")]<-2
cml$st[which(cml$Site=="Ratfield")]<-3
cml$st[which(cml$Site=="Oak")]<-4
cml$st
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("top",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("top",pch=c(1,2,3,4), legend=c("Little Brush","Larson","Ratfield","Oak"))
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("topleft",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("topright",pch=c(1,2,3,4), legend=c("Little Brush","Larson","Ratfield","Oak"))
#### Survival(Mortality) from Duffy (1997)
library(readxl)
cohort_mort_length <- read_excel("L:/Priv/FishTranslatorDiscussions/Fathead Life-history/cohort_mort_length.xlsx")
View(cohort_mort_length)
cml<-cohort_mort_length
##Assign colors to cohort
cml$col[which(cml$Cohort==1)]<-"red"
cml$col[which(cml$Cohort==2)]<-"orange"
cml$col[which(cml$Cohort==3)]<-"yellow"
cml$col[which(cml$Cohort==4)]<-"green"
cml$col[which(cml$Cohort==5)]<-"blue"
##Assign shapes to sites
cml$st[which(cml$Site=="Little Brush")]<-1
cml$st[which(cml$Site=="Larson")]<-2
cml$st[which(cml$Site=="Ratfield")]<-3
cml$st[which(cml$Site=="Oak")]<-4
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("topleft",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("topright",pch=c(1,2,3,4), legend=c("Little Brush","Larson","Ratfield","Oak"))
##Assign shapes to sites
cml$st[which(cml$Site=="Little Brush")]<-1
cml$st[which(cml$Site=="Larson")]<-2
cml$st[which(cml$Site=="Ratfield")]<-3
cml$st[which(cml$Site=="Oak")]<-4
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("topleft",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("topright",pch=c(1,2,3,4), legend=c("Little Brush","Larson","Ratfield","Oak"))
#### Survival(Mortality) from Duffy (1997)
library(readxl)
cohort_mort_length <- read_excel("L:/Priv/FishTranslatorDiscussions/Fathead Life-history/cohort_mort_length.xlsx")
View(cohort_mort_length)
##Assign colors to cohort
cml$col[which(cml$Cohort==1)]<-"red"
cml$col[which(cml$Cohort==2)]<-"orange"
cml$col[which(cml$Cohort==3)]<-"yellow"
cml$col[which(cml$Cohort==4)]<-"green"
cml$col[which(cml$Cohort==5)]<-"blue"
##Assign shapes to sites
cml$st[which(cml$Site=="Little Brush")]<-1
cml$st[which(cml$Site=="Larson")]<-2
cml$st[which(cml$Site=="Ratfield")]<-3
cml$st[which(cml$Site=="Oak")]<-4
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("topleft",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("topright",pch=c(1,2,3,4), legend=c("Little Brush","Larson","Ratfield","Oak"))
cml$st[which(cml$Site=="Little Brush")]<-15
cml$st[which(cml$Site=="Larson")]<-16
cml$st[which(cml$Site=="Ratfield")]<-17
cml$st[which(cml$Site=="Oak")]<-18
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)")
legend("topleft",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("topright",pch=c(15,16,17,18), legend=c("Little Brush","Larson","Ratfield","Oak"))
plot(cml$`Mean Length`,cml$`Natural Mortality`,col=cml$col,pch=cml$st,xlab="Mean Length (mm)",ylab="Mortality Daily (%)",cex=1.5)
legend("topleft",pch=16, legend=c(1,2,3,4,5),col=c("red","orange","yellow","green","blue"))
legend("topright",pch=c(15,16,17,18), legend=c("Little Brush","Larson","Ratfield","Oak"))
S<-function(z,par)
{
return(min(1,par[["S_h"]]+exp(-par[["S_k"]]*(z-par[["S_k"]]))))
}
## s_z parameters
S_pars<-c(
S_h=1,
S_k=2.96
)
S<-function(z,par)
{
#return(min(1,par[["S_h"]]+exp(-par[["S_k"]]*(z-par[["S_k"]]))))
return(par[["S_h"]]+exp(-par[["S_k"]]*(z-par[["S_k"]])))
}
## s_z parameters
S_pars<-c(
S_h=1,
S_k=2.96
)
curve(S(z,S_pars),xname="z",from=0,to=6.1)
#### LOAD PACKAGES AND IMPORT AOPWIKI DATA ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
## Needs igraph package
library(igraph)
#localLibDir<-"C:\\Program Files\\R\\R-3.2.0\\library\\"  #Jason's local library directory
#library(igraph, lib.loc = localLibDir)
##  Set working directory
workingDir<-"C://Users/NPollesc/Desktop/GitHub/AOPwiki/" ## Nate's EPA working directory
#workingDir<-"C://Users/Nathan Pollesch/Documents/GitHub/AOPWiki/" ## Nate's personal comp working directory
# workingDir<-"C:\\Users\\obrienja\\Documents\\GitHub\\AOPWiki\\"
setwd(workingDir)
## Identifies location of data files
KERimport <- "data/all-KERs.txt"
KEimport <- "data/all-KEs.txt"
KEplus <- "data/all-KEs-plus.txt" # Additional ontology information file
KEked <- "data/all-KEs-KED.txt" # Additional ontology information file
KERwoe<- "data/all-ke-ker-woe.txt" # WOE for KER
## source() imports custom functions from associated file
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEKdata<-read.table(paste(workingDir, KEked, sep=""), sep="\t", stringsAsFactors=FALSE, header=F)
## Format KEPdata for easier handling later
KEPdata[,1]<-as.numeric(substring(KEPdata[,1],5)) #strips the characters Aop: from AOPID column and turns the result numeric
KEPdata[,3]<-as.numeric(substring(KEPdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KEKdata[,2]<-as.numeric(substring(KEKdata[,2],7)) #strips the characters Event: from the Event ID column and turns the result numeric
## Identify all unique KEs by looking at all names involved in KERs
allKEs<-append(KERdata[,2],KERdata[,4])
uniqueKEs<-unique(allKEs)
keID<-data.frame(ID=1:length(uniqueKEs),KE=uniqueKEs)
KERs<-cbind(match(KERdata[,2], keID[,2]),match(KERdata[,4], keID[,2]))
AOPg<-graph_from_edgelist(KERs, directed=T) #This construction has unnessary steps
## Add names for key event nodes
V(AOPg)$KE_name<-as.character(keID$KE)
## Add event IDS
V(AOPg)$KE_EID<-KEdata[match(V(AOPg)$KE_name,KEdata[,3]),1] # adds event ID number
V(AOPg)$name<-V(AOPg)$KE_EID #changes default 'name' object to be the KE_EID
## Add AOP IDs. Note: Each KE may belong to more than one AOP, so the AOP_IDs object is a list not just a single AOP ID
for(i in 1:length(V(AOPg))){
if(length(which(!is.na(match(KEPdata[,3],V(AOPg)$KE_EID[i]))))>0){
V(AOPg)[i]$AOP_ID<-list(unique(KEPdata[which(!is.na(match(KEPdata[,3],V(AOPg)[i]$KE_EID))),1]))}
else{V(AOPg)[i]$AOP_ID<-NA}
}
## Add key event designation data
V(AOPg)$KE_KED<-KEKdata[match(V(AOPg)$KE_EID,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
length(V(AOPg)$KE_KED[which(is.na(V(AOPg)$KE_KED))]) #The number of KEs without KE_KED
V(AOPg)$KE_KED[which(is.na(V(AOPg)$KE_KED))]<-"KE" # ALL KEs without KED (NA values from file) are assigned as generic KE
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## Builds AOPwiki network from Edgelist with weights ##
KERWdata<-read.table(paste(workingDir, KERwoe, sep=""), sep="\t", stringsAsFactors=FALSE, header=T)
KERWdata[,2]<-as.numeric(substring(KERWdata[,2],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KERWdata[,3]<-as.numeric(substring(KERWdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KERWdata[,4]<-as.numeric(substring(KERWdata[,4],14))
##Create igraph object
wKERs<-cbind(as.character(KERWdata[,2]),as.character(KERWdata[,3]))
AOPw<-graph_from_edgelist(wKERs, directed=T)
E(AOPw)$KER_ID<-KERWdata[,7]
E(AOPw)$evidence<-KERWdata[,6]
#E(AOPw)$evidence[which(is.na(E(AOPw)$evidence))]<-3
E(AOPw)$quant<-KERWdata[,7]
#E(AOPw)$quant[which(is.na(E(AOPw)$quant))]<-3
## Remove multiple edges
AOPws<-simplify(AOPw,remove.multiple=T,edge.attr.comb="min")
#plot(AOPws, vertex.label=NA,vertex.size=2,edge.arrow.size=.05, edge.width=3/E(AOPws)$evidence)
## Use event ID # as vertex name attribute
V(AOPws)$name<-as.integer(V(AOPws)$name)
## Add KED data for MIE to AO analysis using weighted edges
V(AOPws)$KE_KED<-KEKdata[match(V(AOPws)$name,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
length(V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]) #The number of KEs without KEDs
V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]<-"KE" # ALL KEs without KED (NA values from file) are assigned as generic KE
## Adds KED coloring to AOPws
V(AOPws)$ked_color<-"Yellow"
V(AOPws)$ked_color[which(V(AOPws)$KE_KED=="MIE")]<-"Green"
V(AOPws)$ked_color[which(V(AOPws)$KE_KED=="AO")]<-"Red"
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
### Import edge weight values from AOPws to AOPg ###
## Builds list of edge names that is used to match edges between AOPws and AOPg
wsEnames<-cbind(names(head_of(AOPws,E(AOPws))),names(tail_of(AOPws,E(AOPws))))
AOPgEnames<-cbind(names(head_of(AOPg,E(AOPg))),names(tail_of(AOPg,E(AOPg))))
## Creates a string from both edges to use in 'match'
wsPairs<-paste(wsEnames[,1],wsEnames[,2])
AOPgPairs<-paste(AOPgEnames[,1],AOPgEnames[,2])
## Assigns evidence values from AOPws to AOPg graph
E(AOPg)$evidence<-E(AOPws)$evidence[charmatch(AOPgPairs,wsPairs)]
length(E(AOPg)$evidence[!is.na(E(AOPg)$evidence)])
mean(E(AOPg)$evidence[!is.na(E(AOPg)$evidence)])
# Assigns NAs a value of 3 for evidence
E(AOPg)$evidence[is.na(E(AOPg)$evidence)]<-3
## Assigns quant values from AOPws to AOPg graph
E(AOPg)$quant<-E(AOPws)$quant[charmatch(AOPgPairs,wsPairs)]
length(E(AOPg)$quant[!is.na(E(AOPg)$quant)])
mean(E(AOPg)$quant[!is.na(E(AOPg)$quant)])
# Assigns NAs a value of 3 for evidence
E(AOPg)$quant[is.na(E(AOPg)$quant)]<-3
### AOP ID from AOPws
V(AOPws)$KE_KED<-KEKdata[match(V(AOPws)$name,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
length(V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]) # The number of KEs without KEDs
V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]<-"KE" # ALL KEs without KED (NA values from file) are assigned as generic KE
KEKdata[,1]<-as.numeric(substring(KEKdata[,1],5))
## MIE, KE, and AO coloring assignments
V(AOPg)$ked_color<-"white"
V(AOPg)$ked_color[which(V(AOPg)$KE_KED=="MIE")]<-"Green"
V(AOPg)$ked_color[which(V(AOPg)$KE_KED=="AO")]<-"Red"
## ASSIGN AOP IDS TO AOPWS VERTICES #NEEDS TO BE FIXED# ##
#V(AOPws)$AOP_ID<-KEKdata[match(V(AOPws)$name,KEKdata[,2]),1]
#V(AOPws)$AOP_ID
## Set default plotting background color to black
##!! Evaluate as either T or F or plots will not display properly
set.bg.black(F)
V(AOPg)[which(degree(V(AOPg),mode="in")>1)]
V(AOPg)[which(degree(AOPg,mode="in")>1)]
#### INDIRECT KER CULLING ####
length(V(AOPg))
length(V(AOPg)[which(degree(AOPg,mode="in")>1)])
vd2<-V(AOPg)[which(degree(AOPg,mode="in")>1)]
p<-c()
for(i in V(AOPg)){
p[i]<-all_simple_paths(AOPg,from=i,to=vd2,mode="to")
}
in.paths<-c()
vd2[1]
unlist(vd2[1])
vd2[1,1]
vd2[[1]]
as.numeric(vd2[1])
as.numeric(vd2[2])
as.numeric(vd2[3])
all_simple_paths(AOPg,vd2[1],mode="in")
in.paths[1]<-all_simple_paths(AOPg,vd2[1],mode="in")
in.paths<-list()
in.paths[1]<-all_simple_paths(AOPg,vd2[1],mode="in")
in.paths[[1]]<-all_simple_paths(AOPg,vd2[1],mode="in")
in.paths[[2]]<-all_simple_paths(AOPg,vd2[2],mode="in")
View(in.paths)
aplot(AOPg)
# simple.path.coloring() colors all simple paths between the 'fromnode' node to the
# 'tonode' node using the color specificed by 'clr' stored as the asp_color
# attribute of the edges
simple.path.coloring<-function(gr,fromnode,tonode,loc=T,clr="purple",...){
paths<-all_simple_paths(gr,fromnode,to=tonode,...)
if(length(paths)==0){return("No simple paths between nodes")}
else{
if(loc){
for(i in 1:length(paths)){
E(gr,path=paths[[i]],dir=T)$clrs<-clr}
return(which(!is.na(E(gr)$clrs)))
}
else{
E(gr)$clrs<-"gray"
for(i in 1:length(paths)){
E(gr,path=paths[[i]],dir=T)$clrs<-clr}
return(E(gr)$clrs)
}
## Assign color to simple paths
E(AOPg)$asp_clr<-"gray"# Set color for all edges
E(AOPg)$asp_clr[simple.path.coloring(AOPg,from=vd2[1],mode="in")]<-"purple" #set color for edges in simple paths
# simple.path.coloring() colors all simple paths between the 'fromnode' node to the
# 'tonode' node using the color specificed by 'clr' stored as the asp_color
# attribute of the edges
simple.path.coloring<-function(gr,fromnode,tonode=V(gr),loc=T,clr="purple",...){
paths<-all_simple_paths(gr,fromnode,to=tonode,...)
if(length(paths)==0){return("No simple paths between nodes")}
else{
if(loc){
for(i in 1:length(paths)){
E(gr,path=paths[[i]],dir=T)$clrs<-clr}
return(which(!is.na(E(gr)$clrs)))
}
else{
E(gr)$clrs<-"gray"
for(i in 1:length(paths)){
E(gr,path=paths[[i]],dir=T)$clrs<-clr}
return(E(gr)$clrs)
}
## Assign color to simple paths
E(AOPg)$asp_clr<-"gray"# Set color for all edges
E(AOPg)$asp_clr[simple.path.coloring(AOPg,from=vd2[1],mode="in")]<-"purple" #set color for edges in simple paths
# simple.path.coloring() colors all simple paths between the 'fromnode' node to the
# 'tonode' node using the color specificed by 'clr' stored as the asp_color
# attribute of the edges
simple.path.coloring<-function(gr,fromnode,tonode,loc=T,clr="purple",...){
paths<-all_simple_paths(gr,fromnode,to=tonode,...)
if(length(paths)==0){return("No simple paths between nodes")}
else{
if(loc){
for(i in 1:length(paths)){
E(gr,path=paths[[i]],dir=T)$clrs<-clr}
return(which(!is.na(E(gr)$clrs)))
}
else{
E(gr)$clrs<-"gray"
for(i in 1:length(paths)){
E(gr,path=paths[[i]],dir=T)$clrs<-clr}
return(E(gr)$clrs)
}
## Assign color to simple paths
E(AOPg)$asp_clr<-"gray"# Set color for all edges
E(AOPg)$asp_clr[simple.path.coloring(AOPg,from=vd2[1],tonode=V(AOPg),mode="in")]<-"purple" #set color for edges in simple paths
# simple.path.coloring() colors all simple paths between the 'fromnode' node to the
# 'tonode' node using the color specificed by 'clr' stored as the asp_color
# attribute of the edges
simple.path.coloring<-function(gr,fromnode,tonode,inmode,loc=T,clr="purple",...){
paths<-all_simple_paths(gr,fromnode,to=tonode,mode=inmode)
if(length(paths)==0){return("No simple paths between nodes")}
else{
if(loc){
for(i in 1:length(paths)){
E(gr,path=paths[[i]],dir=T)$clrs<-clr}
return(which(!is.na(E(gr)$clrs)))
}
else{
E(gr)$clrs<-"gray"
for(i in 1:length(paths)){
E(gr,path=paths[[i]],dir=T)$clrs<-clr}
return(E(gr)$clrs)
}
# simple.path.coloring() colors all simple paths between the 'fromnode' node to the
# 'tonode' node using the color specificed by 'clr' stored as the asp_color
# attribute of the edges
simple.path.coloring<-function(gr,fromnode,tonode,inmode,loc=T,clr="purple"){
paths<-all_simple_paths(gr,fromnode,to=tonode,mode=inmode)
if(length(paths)==0){return("No simple paths between nodes")}
else{
if(loc){
for(i in 1:length(paths)){
E(gr,path=paths[[i]],dir=T)$clrs<-clr}
return(which(!is.na(E(gr)$clrs)))
}
else{
E(gr)$clrs<-"gray"
for(i in 1:length(paths)){
E(gr,path=paths[[i]],dir=T)$clrs<-clr}
return(E(gr)$clrs)
}
## Assign color to simple paths
E(AOPg)$asp_clr<-"gray"# Set color for all edges
E(AOPg)$asp_clr[simple.path.coloring(AOPg,from=vd2[1],tonode=V(AOPg),inmode="in")]<-"purple" #set color for edges in simple paths
E(AOPg,path=in.paths[[1]],dir=T)$clrs<-red
E(AOPg,path=in.paths[[1]],dir=T)$clrs<-"red"
E(AOPg,path=in.paths[[1,1]],dir=T)$clrs<-"red"
in.paths[[1]]
in.paths[[1]][1]
E(AOPg,path=in.paths[[1]][1],dir=T)$clrs<-"red"
E(AOPg,path=in.paths[[1]][1],dir=T)$clr<-"red"
in.paths[[1]]<-all_simple_paths(AOPg,vd2[1],mode="out")
in.paths[[2]]<-all_simple_paths(AOPg,vd2[2],mode="out")
in.paths[[1]]
in.paths[[1]]<-all_simple_paths(AOPg,vd2[1],mode="in")
in.paths[[2]]<-all_simple_paths(AOPg,vd2[2],mode="in")
in.paths[[1]]
in.paths[[1,1]]
in.paths[[1]][1]
p1<-in.paths[[1]][1]
E(AOPg,path=p1,dir=T)$clr<-"red"
E(AOPg)$clr<-"gray"
E(AOPg,path=p1,dir=T)$clr<-"red"
in.paths[[1]][[1]]
E(AOPg,path=in.paths[[1]][[1]],dir=T)$clr<-"red"
p1<-in.paths[[1]][[1]]
E(AOPg,path=ip,dir=T)$clr<-"red"
E(AOPg,path=p1,dir=T)$clr<-"red"
in.paths[1]<-all_simple_paths(AOPg,vd2[1],mode="in")
in.paths<-c()
in.paths[1]<-all_simple_paths(AOPg,vd2[1],mode="in")
in.paths[1]
E(AOPg,path=in.paths[1],dir=T)$clr<-"red"
in.paths<-all_simple_paths(AOPg,vd2[1],mode="in")
E(AOPg,path=in.paths[[1]],dir=T)$clr<-"red"
in.paths<-list()
in.paths[[1]]<-all_simple_paths(AOPg,vd2[1],mode="in")
in.paths[[2]]<-all_simple_paths(AOPg,vd2[2],mode="in")
in.paths[[1]]
o.paths<-list()
o.paths[[1]]<-all_simple_paths(AOPg,vd2[1],mode="out")
o.paths[[2]]<-all_simple_paths(AOPg,vd2[2],mode="out")
o.paths[[1]]
in.paths[[2]]
o.paths[[2]]
E(AOPg,path=o.paths[[1]][1],dir=T)$clr<-"red"
E(AOPg,path=o.paths[[1]][[1]],dir=T)$clr<-"red"
aplot(AOPg)
aplot(AOPg,ecol=E(AOPg)$clr)
V(AOPg)$clr<-"gray"
V(AOPg)[vd2[1]]$clr<-"red"
aplot(AOPg,ecol=E(AOPg)$clr,vcol=V(AOPg)$clr)
in.paths[[1]][[1]]
tail(in.paths[[1]][[1]])
tail(in.paths[[1]][[1]],1)
head(in.paths[[1]][[1]],1)
c(in.paths[[1]][[1]][-1], in.paths[[1]][[1]][1])
E(AOPg)$clr<-"gray"
E(AOPg,path=c(in.paths[[1]][[1]][-1], in.paths[[1]][[1]][1]),dir=T)$clr<-"red"
aplot(AOPg,ecol=E(AOPg)$clr,vcol=V(AOPg)$clr)
